# -*- coding: utf-8 -*-
# Generated by Django 1.11 on 2018-05-21 17:48
from __future__ import unicode_literals

import datetime
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='DevControl',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('num', models.CharField(max_length=20, unique=True, verbose_name='编号')),
                ('dev_type', models.IntegerField(choices=[(1, '光伏组逆变器'), (2, '光伏板'), (3, '风力逆变器'), (4, '风机'), (5, '燃料电池逆变器'), (6, '燃料电池'), (11, '蓄电池组逆变器'), (12, '蓄电池'), (13, '飞轮逆变器'), (14, '飞轮'), (20, '高压负荷开关'), (21, '隔离开关'), (22, '断路器')], verbose_name='设备类型')),
                ('switch_status', models.IntegerField(blank=True, choices=[(0, '断开'), (1, '闭合')], default=0, null=True, verbose_name='开关状态控制')),
                ('active_power', models.FloatField(blank=True, null=True, verbose_name='有功功率设置')),
                ('reactive_power', models.FloatField(blank=True, null=True, verbose_name='无功功率设置')),
                ('powerfactor', models.FloatField(blank=True, null=True, verbose_name='功率因素设置')),
            ],
            options={
                'verbose_name': 'Device Control Info',
                'verbose_name_plural': 'Device Control Info',
            },
        ),
        migrations.CreateModel(
            name='EnvAddressC',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('env_num', models.CharField(max_length=20, unique=True, verbose_name='环境地址编号')),
            ],
            options={
                'verbose_name': 'Environmental Address',
                'verbose_name_plural': 'Environmental Address',
            },
        ),
        migrations.CreateModel(
            name='EnvironmentData',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(default=datetime.datetime.now, verbose_name='时间戳')),
                ('env_num', models.CharField(max_length=20, verbose_name='环境地址编号')),
                ('wind_speed', models.FloatField(blank=True, null=True, verbose_name='风速(m/s)')),
                ('wind_direct', models.FloatField(blank=True, null=True, verbose_name='风向(°)')),
                ('env_temperature', models.FloatField(blank=True, null=True, verbose_name='环境温度(°C)')),
                ('env_temperature2', models.FloatField(blank=True, null=True, verbose_name='环境温度2(°C)')),
                ('env_humidity', models.FloatField(blank=True, null=True, verbose_name='环境湿度')),
                ('air_pressure', models.FloatField(blank=True, null=True, verbose_name='气压(hPa)')),
                ('period_rainfall', models.FloatField(blank=True, null=True, verbose_name='雨量时间间隔累计量(mm)')),
                ('period_sun', models.FloatField(blank=True, null=True, verbose_name='日照时间间隔累计量(mm)')),
                ('instant_total_radiation', models.FloatField(blank=True, null=True, verbose_name='总辐射瞬时值')),
                ('instant_scat_radiation', models.FloatField(blank=True, null=True, verbose_name='散辐射瞬时值')),
                ('instant_direct_radiation', models.FloatField(blank=True, null=True, verbose_name='直辐射瞬时值')),
                ('instant_net_radiation', models.FloatField(blank=True, null=True, verbose_name='净辐射瞬时值')),
                ('instant_photosynthetic_radiation', models.FloatField(blank=True, null=True, verbose_name='光合辐射瞬时值')),
                ('instant_ultraviolet_radiation', models.FloatField(blank=True, null=True, verbose_name='紫外辐射瞬时值')),
                ('period_total_radiation', models.FloatField(blank=True, null=True, verbose_name='总辐射时间间隔累计值')),
                ('period_scat_radiation', models.FloatField(blank=True, null=True, verbose_name='散辐射时间间隔累计值')),
                ('period_direct_radiation', models.FloatField(blank=True, null=True, verbose_name='直辐射时间间隔累计量')),
                ('period_net_radiation', models.FloatField(blank=True, null=True, verbose_name='净辐射时间间隔累计值')),
                ('period_photosynthetic_radiation', models.FloatField(blank=True, null=True, verbose_name='光合辐射时间间隔累计量')),
                ('period_ultraviolet_radiation', models.FloatField(blank=True, null=True, verbose_name='紫外辐射时间间隔累计值')),
            ],
            options={
                'verbose_name': 'Environmental Data',
                'verbose_name_plural': 'Environmental Data',
            },
        ),
        migrations.CreateModel(
            name='Img',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20, verbose_name='名称')),
                ('name_h', models.CharField(max_length=30, verbose_name='汉语名称')),
                ('img', models.ImageField(upload_to='img', verbose_name='图片')),
            ],
            options={
                'verbose_name': 'Picture Managment',
                'verbose_name_plural': 'Picture Managment',
            },
        ),
        migrations.CreateModel(
            name='PVAnalogQuantityData1',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(default=datetime.datetime.now, verbose_name='时间戳')),
                ('pv_num', models.CharField(max_length=20, verbose_name='光伏逆变器编号')),
                ('matrix_cur', models.FloatField(blank=True, null=True, verbose_name='阵列电流')),
                ('matrix_volt', models.FloatField(blank=True, null=True, verbose_name='阵列电压')),
                ('matrix_power_in', models.FloatField(blank=True, null=True, verbose_name='阵列输入功率')),
                ('grid_volt_ab', models.FloatField(blank=True, null=True, verbose_name='电网AB线电压')),
                ('grid_volt_bc', models.FloatField(blank=True, null=True, verbose_name='电网BC线电压')),
                ('grid_volt_ca', models.FloatField(blank=True, null=True, verbose_name='电网CA线电压')),
                ('on_grid_cur_a', models.FloatField(blank=True, null=True, verbose_name='A相并网电流')),
                ('on_grid_cur_b', models.FloatField(blank=True, null=True, verbose_name='B相并网电流')),
                ('on_grid_cur_c', models.FloatField(blank=True, null=True, verbose_name='C相并网电流')),
                ('power_factor_a', models.FloatField(blank=True, null=True, verbose_name='A相功率因素')),
                ('power_factor_b', models.FloatField(blank=True, null=True, verbose_name='B相功率因素')),
                ('power_factor_c', models.FloatField(blank=True, null=True, verbose_name='C相功率因素')),
                ('grid_freq', models.FloatField(blank=True, null=True, verbose_name='电网频率')),
            ],
            options={
                'verbose_name': 'PVI Analog Data 1',
                'verbose_name_plural': 'PVI Analog Data 1',
            },
        ),
        migrations.CreateModel(
            name='PVAnalogQuantityData2',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(default=datetime.datetime.now, verbose_name='时间戳')),
                ('pv_num', models.CharField(max_length=20, verbose_name='光伏逆变器编号')),
                ('on_grid_p', models.FloatField(blank=True, null=True, verbose_name='并网有功功率')),
                ('on_grid_q', models.FloatField(blank=True, null=True, verbose_name='并网无功功率')),
                ('on_grid_s', models.FloatField(blank=True, null=True, verbose_name='并网视在功率')),
                ('inv_cabin_temp', models.FloatField(blank=True, null=True, verbose_name='机柜温度')),
                ('day_gen_power', models.FloatField(blank=True, null=True, verbose_name='日累计发电量')),
                ('day_runtime', models.FloatField(blank=True, null=True, verbose_name='日运行时间')),
                ('total_gen_power', models.FloatField(blank=True, null=True, verbose_name='总累计发电量')),
                ('total_runtime', models.FloatField(blank=True, null=True, verbose_name='总运行时间')),
                ('co2_reduce', models.FloatField(blank=True, null=True, verbose_name='CO2减排量')),
            ],
            options={
                'verbose_name': 'PVI Analog Data 2',
                'verbose_name_plural': 'PVI Analog Data 2',
            },
        ),
        migrations.CreateModel(
            name='PVDigitalQuantityData',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pv_num', models.CharField(max_length=20, unique=True, verbose_name='光伏逆变器编号')),
                ('status_down', models.IntegerField(blank=True, choices=[(0, '是'), (1, '否')], null=True, verbose_name='设备状态_停机')),
                ('status_standby', models.IntegerField(blank=True, choices=[(0, '是'), (1, '否')], null=True, verbose_name='设备状态_待机')),
                ('status_selftest', models.IntegerField(blank=True, choices=[(0, '是'), (1, '否')], null=True, verbose_name='设备状态_自检')),
                ('status_ongrid', models.IntegerField(blank=True, choices=[(0, '是'), (1, '否')], null=True, verbose_name='设备状态_并网')),
                ('locking_self', models.IntegerField(blank=True, choices=[(0, '是'), (1, '否')], null=True, verbose_name='闭锁未自锁')),
                ('emergency_stop', models.IntegerField(blank=True, choices=[(0, '启动'), (1, '未启动')], null=True, verbose_name='急停')),
                ('remote_local', models.IntegerField(blank=True, choices=[(0, '是'), (1, '否')], null=True, verbose_name='远程本地')),
                ('PV_reverse_connection', models.IntegerField(blank=True, choices=[(0, '是'), (1, '否')], null=True, verbose_name='PV反接')),
                ('PV_insulation_resistance', models.IntegerField(blank=True, choices=[(0, '正常'), (1, '异常')], null=True, verbose_name='PV对地绝缘阻抗')),
                ('DC_overvoltage', models.IntegerField(blank=True, choices=[(0, '正常'), (1, '异常')], null=True, verbose_name='直流过压')),
                ('power_voltage', models.IntegerField(blank=True, choices=[(0, '正常'), (1, '异常')], null=True, verbose_name='电网电压')),
                ('grid_frequency', models.IntegerField(blank=True, choices=[(0, '正常'), (1, '异常')], null=True, verbose_name='电网频率')),
                ('grid_reverse_order', models.IntegerField(blank=True, choices=[(0, '是'), (1, '否')], null=True, verbose_name='电网反序')),
                ('inverter_overload', models.IntegerField(blank=True, choices=[(0, '正常'), (1, '异常')], null=True, verbose_name='逆变器过载')),
                ('inverter_overheating', models.IntegerField(blank=True, choices=[(0, '正常'), (1, '异常')], null=True, verbose_name='逆变器过热')),
                ('inverter_short_circuit', models.IntegerField(blank=True, choices=[(0, '正常'), (1, '异常')], null=True, verbose_name='逆变器短路')),
                ('smoke_alarm', models.IntegerField(blank=True, choices=[(0, '正常'), (1, '异常')], null=True, verbose_name='烟感报警')),
                ('ambient_temperature_overheating', models.IntegerField(blank=True, choices=[(0, '正常'), (1, '异常')], null=True, verbose_name='环境温度过热')),
                ('reactive_power_compensation', models.IntegerField(blank=True, choices=[(0, '是'), (1, '否')], null=True, verbose_name='夜间无功补偿')),
                ('DC_lightning_protection', models.IntegerField(blank=True, choices=[(0, '正常'), (1, '异常')], null=True, verbose_name='直流防雷故障')),
                ('AC_lightning_protection', models.IntegerField(blank=True, choices=[(0, '正常'), (1, '异常')], null=True, verbose_name='交流防雷故障')),
                ('island_protection', models.IntegerField(blank=True, choices=[(0, '启动'), (1, '未启动')], null=True, verbose_name='孤岛保护')),
            ],
            options={
                'verbose_name': 'PVI Digital Quantity Data',
                'verbose_name_plural': 'PVI Digital Quantity Data',
            },
        ),
        migrations.CreateModel(
            name='WebMicrogrid',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('num', models.CharField(max_length=20, unique=True, verbose_name='编号')),
                ('name', models.CharField(max_length=50, verbose_name='区域/设备/元件名')),
                ('remark', models.CharField(blank=True, max_length=200, null=True, verbose_name='备注')),
                ('type', models.IntegerField(choices=[(1, '子区域'), (2, '设备组'), (3, '具体发电设备')], verbose_name='编号类型')),
                ('area_type', models.IntegerField(choices=[(0, 'Spacer Area'), (1, 'PV Area'), (2, 'Wind Power Area'), (3, 'Gas Turbine Area'), (4, 'Battery Energy Storage Area'), (5, 'Flywheel Energy Storage Area'), (6, 'Control Area'), (7, 'Environment')], verbose_name='区域类别')),
                ('control_belong', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='sub2', to='microgrids.WebMicrogrid', to_field='num', verbose_name='控制区域所属')),
                ('parent_area', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='sub', to='microgrids.WebMicrogrid', to_field='num', verbose_name='设备上级')),
            ],
            options={
                'verbose_name': 'Web Management of Microgrid Devices',
                'verbose_name_plural': 'Web Management of Microgrid Devices',
            },
        ),
    ]
